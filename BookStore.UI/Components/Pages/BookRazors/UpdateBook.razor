@page "/update-book/{id:int}"
@using BookStore.UI.Models
@using BookStore.UI.Services
@inject IBookService BookService
@inject NavigationManager Navigation

<h3 class="text-center">Update Book</h3>

@if (bookToUpdate == null)
{
    <p>Loading book details...</p>
}
else
{
    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="bookToUpdate.Title" />
    </div>

    <div class="form-group">
        <label for="type">Type:</label>
        <InputText id="type" class="form-control" @bind-Value="bookToUpdate.TypeBook" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" class="form-control" @bind-Value="bookToUpdate.Price" />
    </div>

    <div class="form-group">
        <label for="publishedDate">Published Date:</label>
        <InputDate id="publishedDate" class="form-control" @bind-Value="bookToUpdate.PublishedDate" />
    </div>

    <div class="form-group">
        <label for="authorId">Author Id:</label>
        <InputNumber id="authorId" class="form-control" @bind-Value="bookToUpdate.AuthorId" />
    </div>

    <button @onclick="UpdateTheBook" class="btn btn-primary mt-3">Save Changes</button>
    <button @onclick="Cancel" class="btn btn-secondary mt-3 ms-2">Cancel</button>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private BookListDto? bookToUpdate;
    private bool isUpdating;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookDetailsAsync();
    }

    private async Task LoadBookDetailsAsync()
    {
        try
        {
            var allBooks = await BookService.GetAllBooksAsync();
            bookToUpdate = allBooks.FirstOrDefault(b => b.BookId == Id);

            if (bookToUpdate == null)
            {
                Console.WriteLine($"Book with ID {Id} not found.");
                Navigation.NavigateTo("/get-books");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading book details: {ex.Message}");
        }
    }

    private async Task UpdateTheBook()
    {
        if (bookToUpdate == null || isUpdating) return;

        try
        {
            isUpdating = true;
            await BookService.UpdateBookAsync(bookToUpdate);
            Navigation.NavigateTo("/get-books");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating book: {ex.Message}");
        }
        finally
        {
            isUpdating = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/get-books");
    }
}
